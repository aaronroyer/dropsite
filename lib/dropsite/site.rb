require 'fileutils'

module Dropsite
  # Main site builder class. Some inspiration here from Jekyll (github.com/mojombo/jekyll).
  class Site
    attr_reader :site_tree, :public_dir, :exclude, :disabled_plugins, :site_files_dir

    def initialize(config)
      if config.is_a? String
        @public_dir = config
        @exclude, @disabled_plugins = [], []
        @quiet = false
      else
        @config = config.clone
        @public_dir = config[:public_dir]
        @exclude = config[:exclude] || []
        @disabled_plugins = config[:disabled_plugins] || []
        @quiet = config[:quiet] || false
      end

      @site_tree = nil
      @site_files_dir = File.join(@public_dir, 'dropsite')
    end

    def process
      clean
      read
      render
      write
    end

    # Cleans up files previously generated by Dropsite (or at least ones)
    # that look like they are. By default this will be an index.html
    # file and dropsite directory in the Public directory root.
    def clean
      if File.exist?(@site_files_dir)
        notice "Deleting existing site files dir at #{@site_files_dir}"
        FileUtils.rm_rf(@site_files_dir)
      end

      index_file = File.join(@public_dir, 'index.html')
      if File.exist?(index_file)
        notice "Deleting existing top-level index at #{index_file}"
        File.delete(index_file)
      end
    end

    def read
      @site_tree = read_directory
    end

    def render
      site_tree.render
    end

    def write
      notice "Creating site files dir at #{site_files_dir}"
      Dir.mkdir(site_files_dir)
      site_tree.write

      Dir.mkdir(assets_dir)
      DirRenderer.renderers.each do |r|
        if File.exist? r.assets_dir
          FileUtils.cp_r(r.assets_dir, File.join(assets_dir, Dropsite.underscorize(r.class.to_s)))
        end
      end
    end

    def assets_dir
      File.join(@site_files_dir, 'dropsite-assets')
    end

    def notice(message)
      return if @quiet
      warn "#{File.basename($0)}: #{message}"
    end

    protected

    def read_directory(dir='')
      base = File.join(@public_dir, dir)
      entries = filter_entries(Dir.entries(base))

      dir_entries = []

      entries.each do |f|
        f_abs = File.join(base, f)
        f_rel = File.join(dir, f).sub(/^\//, '')
        if File.directory?(f_abs)
          dir_entries << read_directory(f_rel)
        elsif !File.symlink?(f_abs)
          # Ignore a top level Icon file, used for a custom directory icon on OS X
          # TODO: find out how to do this specifically for the Icon file... there is a
          #       weird character at the end of the folder icon file name
          next if RUBY_PLATFORM =~ /darwin/ && f_rel =~ /^Icon/ && f_rel.size == 5 && dir == ''
          dir_entries << SiteFile.new(f_rel, f_abs, self)
        end
      end
      SiteDir.new(dir, dir_entries, self)
    end

    def filter_entries(entries)
      entries.reject do |e|
        ['.', '_', '#'].include?(e[0..0]) || e[-1..-1] == '~' || @exclude.include?(e)
      end
    end
  end
end
